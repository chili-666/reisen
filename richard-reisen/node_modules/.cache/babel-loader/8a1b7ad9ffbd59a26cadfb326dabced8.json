{"ast":null,"code":"/*eslint no-console: 0*/\nvar React = require('react');\n\nvar showdown = require('showdown');\n\nvar htmlparser = require('htmlparser2');\n/**\n * Example: new Converter(options).convert(markdown)\n *\n * Options will be pushed forward to the showdown converter:\n * https://github.com/showdownjs/showdown#valid-options\n * Just the `components` option is managed by this converter.\n * It define the component name (tag name) to component React class definition\n * (instance of createClass) mapping.\n */\n\n\nmodule.exports = function Converter(options) {\n  'use strict';\n\n  var self = this;\n  this._converter = new showdown.Converter(options); // remove newlines from table tags\n\n  this._converter.listen('tables.after', function (_, text) {\n    var result = text;\n    var tags = ['table', 'thead', 'tbody', 'tfoot', 'th', 'tr', 'td'];\n    tags.forEach(function (tag) {\n      result = result.replace(new RegExp('\\n<' + tag, 'g'), '<' + tag).replace(new RegExp('\\n</' + tag, 'g'), '</' + tag);\n    });\n    return result;\n  });\n\n  this._components = Object.assign({}, options && options.components);\n\n  function fixClass(element) {\n    if (!element.attribs.class) {\n      return;\n    }\n\n    element.attribs.className = element.attribs.class;\n    delete element.attribs.class;\n  } // remove the style attribute and apply it after component mount\n\n\n  function fixStyle(element) {\n    if (!element.attribs.style) {\n      return;\n    }\n\n    var style = element.attribs.style;\n    delete element.attribs.style;\n\n    element.attribs.ref = function (c) {\n      if (c) {\n        c.setAttribute('style', style);\n      }\n    };\n  }\n\n  this._mapElement = function (element) {\n    if (element.type === 'tag') {\n      fixStyle(element);\n      fixClass(element); // this is used to let showdown know whether or not to render md inside of\n      // an html element - we want to strip this out before we go to react to\n      // avoid unknown prop warnings\n\n      delete element.attribs.markdown;\n      var component = this._components[element.name] || element.name;\n      return React.createElement(component, element.attribs, this._mapElements(element.children));\n    } else if (element.type === 'text') {\n      return element.data;\n    } else if (element.type === 'comment') {\n      // noop\n      return null;\n    } else {\n      console.warn('Warning: Could not map element with type ' + element.type + ' yet.');\n      return null;\n    }\n  };\n\n  this._mapElements = function (elements) {\n    var children = React.Children.toArray(elements.map(function (element) {\n      return self._mapElement(element);\n    }).filter(function (element) {\n      return element;\n    }));\n    return children.length === 0 ? null : children;\n  };\n\n  var parserOptions = {\n    // make sure to decode entities to avoid security issue, see\n    // https://github.com/fb55/htmlparser2/issues/105\n    decodeEntities: true,\n    // keep case of attribute names so that stuff like `className` works correctly\n    lowerCaseAttributeNames: false,\n    // don't alter the case of tags\n    lowerCaseTags: false\n  };\n\n  this.convert = function (markdown) {\n    var html = this._converter.makeHtml(markdown);\n\n    var root = htmlparser.parseDOM(html, parserOptions);\n\n    var reactElements = this._mapElements(root);\n\n    if (reactElements && reactElements.length === 1) {\n      return reactElements[0];\n    } else {\n      return React.createElement('div', null, reactElements);\n    }\n  };\n};","map":{"version":3,"sources":["/home/chili_666/projects/reisen/richard-reisen/node_modules/react-showdown/lib/Converter.js"],"names":["React","require","showdown","htmlparser","module","exports","Converter","options","self","_converter","listen","_","text","result","tags","forEach","tag","replace","RegExp","_components","Object","assign","components","fixClass","element","attribs","class","className","fixStyle","style","ref","c","setAttribute","_mapElement","type","markdown","component","name","createElement","_mapElements","children","data","console","warn","elements","Children","toArray","map","filter","length","parserOptions","decodeEntities","lowerCaseAttributeNames","lowerCaseTags","convert","html","makeHtml","root","parseDOM","reactElements"],"mappings":"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","sourcesContent":["/*eslint no-console: 0*/\n\nvar React = require('react');\nvar showdown  = require('showdown');\nvar htmlparser = require('htmlparser2');\n\n/**\n * Example: new Converter(options).convert(markdown)\n *\n * Options will be pushed forward to the showdown converter:\n * https://github.com/showdownjs/showdown#valid-options\n * Just the `components` option is managed by this converter.\n * It define the component name (tag name) to component React class definition\n * (instance of createClass) mapping.\n */\nmodule.exports = function Converter(options) {\n\t'use strict';\n\tvar self = this;\n\n\tthis._converter = new showdown.Converter(options);\n\n\t// remove newlines from table tags\n\tthis._converter.listen('tables.after', function(_, text) {\n\t\tvar result = text;\n\t\tvar tags = ['table', 'thead', 'tbody', 'tfoot', 'th', 'tr', 'td'];\n\t\ttags.forEach(function(tag) {\n\t\t\tresult = result\n\t\t\t\t.replace(new RegExp('\\n<' + tag, 'g'), '<' + tag)\n\t\t\t\t.replace(new RegExp('\\n</' + tag, 'g'), '</' + tag);\n\t\t});\n\t\treturn result;\n\t});\n\n\tthis._components = Object.assign({}, options && options.components);\n\n\tfunction fixClass(element) {\n\t\tif (!element.attribs.class) {\n\t\t\treturn;\n\t\t}\n\t\telement.attribs.className = element.attribs.class;\n\t\tdelete element.attribs.class;\n\t}\n\n\t// remove the style attribute and apply it after component mount\n\tfunction fixStyle(element) {\n\t\tif (!element.attribs.style) {\n\t\t\treturn;\n\t\t}\n\t\tvar style = element.attribs.style;\n\t\tdelete element.attribs.style;\n\t\telement.attribs.ref = function(c) {\n\t\t\tif (c) {\n\t\t\t\tc.setAttribute('style', style);\n\t\t\t}\n\t\t};\n\t}\n\n\tthis._mapElement = function(element) {\n\t\tif (element.type === 'tag') {\n\t\t\tfixStyle(element);\n\t\t\tfixClass(element);\n\n\t\t\t// this is used to let showdown know whether or not to render md inside of\n\t\t\t// an html element - we want to strip this out before we go to react to\n\t\t\t// avoid unknown prop warnings\n\t\t\tdelete element.attribs.markdown;\n\n\t\t\tvar component = this._components[element.name] || element.name;\n\t\t\treturn React.createElement(component, element.attribs, this._mapElements(element.children));\n\t\t} else if (element.type === 'text') {\n\t\t\treturn element.data;\n\t\t} else if (element.type === 'comment') {\n\t\t\t// noop\n\t\t\treturn null;\n\t\t} else {\n\t\t\tconsole.warn('Warning: Could not map element with type ' + element.type + ' yet.');\n\t\t\treturn null;\n\t\t}\n\t};\n\n\tthis._mapElements = function(elements) {\n\t\tvar children = React.Children.toArray(elements.map(function(element) {\n\t\t\treturn self._mapElement(element);\n\t\t}).filter(function(element) {\n\t\t\treturn element;\n\t\t}));\n\t\treturn children.length === 0 ? null : children;\n\t};\n\n\tvar parserOptions = {\n\t\t// make sure to decode entities to avoid security issue, see\n\t\t// https://github.com/fb55/htmlparser2/issues/105\n\t\tdecodeEntities: true,\n\t\t// keep case of attribute names so that stuff like `className` works correctly\n\t\tlowerCaseAttributeNames: false,\n\t\t// don't alter the case of tags\n\t\tlowerCaseTags: false\n\t};\n\n\tthis.convert = function(markdown) {\n\t\tvar html = this._converter.makeHtml(markdown);\n\t\tvar root = htmlparser.parseDOM(html, parserOptions);\n\t\tvar reactElements = this._mapElements(root);\n\t\tif (reactElements && reactElements.length === 1) {\n\t\t\treturn reactElements[0];\n\t\t} else {\n\t\t\treturn React.createElement('div', null, reactElements);\n\t\t}\n\t};\n};\n"]},"metadata":{},"sourceType":"script"}